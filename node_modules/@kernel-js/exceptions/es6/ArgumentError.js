function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import ExtendableError from './ExtendableError';

var ArgumentError = function (_ExtendableError) {
  _inherits(ArgumentError, _ExtendableError);

  function ArgumentError() {
    _classCallCheck(this, ArgumentError);

    var message = null;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 0) {
      message = 'Invalid or missing argument supplied';
    } else if (args[0] !== undefined && typeof args[0] === 'string') {
      message = 'Invalid or missing argument supplied: \'' + args[0] + '\'';
    }

    return _possibleConstructorReturn(this, (ArgumentError.__proto__ || Object.getPrototypeOf(ArgumentError)).call(this, message, args.filter(function (arg) {
      return arg !== message;
    })));
  }

  return ArgumentError;
}(ExtendableError);

export default ArgumentError;