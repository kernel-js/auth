var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import ExtendableError from './ExtendableError';
import ArgumentError from './ArgumentError';
import AuthenticationRequiredError from './AuthenticationRequiredError';

var HttpError = function (_ExtendableError) {
  _inherits(HttpError, _ExtendableError);

  function HttpError() {
    _classCallCheck(this, HttpError);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 0) {
      var _this = _possibleConstructorReturn(this, (HttpError.__proto__ || Object.getPrototypeOf(HttpError)).call(this, 'Http error.', 500));

      return _possibleConstructorReturn(_this);
    }

    var code = null;
    var message = null;
    var error = null;
    var codeMap = {
      400: 'ArgumentError',
      401: 'AuthenticationRequiredError',
      403: 'ForbiddenError',
      404: 'NotFoundError',
      405: 'NotSupportedError',
      409: 'AlreadyInUseError'
    };

    args.forEach(function (arg) {
      switch (true) {
        case arg instanceof Error:
          error = arg;
          break;
        case typeof arg === 'string':
          message = arg;
          break;
        case typeof arg === 'number':
          code = arg;
          break;
        case (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object':
          codeMap = arg;
          break;
      }
    });

    var _this = _possibleConstructorReturn(this, (HttpError.__proto__ || Object.getPrototypeOf(HttpError)).call(this, message, code, error));

    var errorImpl = null;

    if (codeMap[code] === undefined) {
      errorImpl = null;
    } else if (codeMap[code] === 'AlreadyInUseError') {
      errorImpl = new codeMap[code](message, args.filter(function (arg) {
        return arg !== code && arg !== message;
      }));
    } else if (['ArgumentError', 'AuthenticationRequiredError', 'ForbiddenError', 'NotFoundError', 'NotSupportedError', 'AlreadyInUseError'].indexOf(codeMap[code]) !== -1) {
      errorImpl = new codeMap[code](message, error);
    } else {
      errorImpl = new codeMap[code](args);
    }

    _this.name = errorImpl ? errorImpl.name : _this.name;
    _this.code = errorImpl ? errorImpl.code : _this.code;
    _this.message = errorImpl ? errorImpl.message : _this.message;

    return _possibleConstructorReturn(_this);
  }

  return HttpError;
}(ExtendableError);

export default HttpError;