'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Adapter = require('./Adapters/Adapter');

var _Adapter2 = _interopRequireDefault(_Adapter);

var _exceptions = require('@kernel-js/exceptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new _exceptions.TypeError("Cannot call a class as a function"); } }

var currentAdapter = new WeakMap();

var Storage = function () {

  /**
   * Storage constructor
   *
   * @param {null|string|object|function}   adapter        The adapter to use. Can be LocalStorageAdapter (default),
   *                                                       SessionStorageAdapter or CookieAdapter
   * @param {boolean}                       encrypted      Optional. If you want values to be encrypted before save.
   * @param {function}                      closure        Optional. The function to be called when changes occurs by another instance.
   * @param {array}                         keys           Optional. If you want to specify only some keys to watch.
   */
  function Storage() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'LocalStorageAdapter';
    var encrypted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var closure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var keys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

    _classCallCheck(this, Storage);

    if (typeof adapter === 'string') {
      adapter = this.createAdapterFromName(adapter);
    }

    if (!(adapter instanceof _Adapter2.default)) {
      throw new _exceptions.TypeError('Please provide a valid adapter.');
    }

    this.setAdapter(adapter);

    if (typeof closure === 'function') {
      this.listen(closure, keys);
    }
  }

  /**
   * @param adapterName
   * @returns {*}
   */


  _createClass(Storage, [{
    key: 'createAdapterFromName',
    value: function createAdapterFromName(adapterName) {
      return new (require('./Adapters/' + adapterName).default)();
    }

    /**
     * Get current adapter
     *
     * @return {AbstractAdapter}
     */

  }, {
    key: 'getAdapter',
    value: function getAdapter() {
      return currentAdapter.get(this);
    }

    /**
     * Set current adapter
     *
     * @param {null|string|object|function}   adapter        The adapter to use. Can be LocalStorageAdapter (default),
     *                                                       SessionStorageAdapter, CookiesAdapter or a custom.
     */

  }, {
    key: 'setAdapter',
    value: function setAdapter(adapter) {
      currentAdapter.set(this, adapter);
    }

    /**
     * Get all items from storage.
     *
     * @returns {*}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'all',
    value: function all() {
      return this.getAdapter().all();
    }

    /**
     * Determines whether an item is present in the storage.
     *
     * NOTE: It is recommended that has() is only to be used for storage warming type purposes
     * and not to be used within your live applications operations for getValue/set, as this method
     * is subject to a race condition where your has() will return true and immediately after,
     * another script can remove it making the state of your app out of date.
     *
     * @param   {string}     key           The storage item key.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'has',
    value: function has(key) {
      return this.getAdapter().has(key);
    }

    /**
     * Fetches a value from the storage.
     *
     * @param   {string}     key           The unique key of this item in the storage.
     *                                     You can use dot notation on nested objects.
     * @param   {*}          defaultValue  Optional. Default value to return if the key does not exist or is null.
     *
     * @returns {*}                        The value of the item from the storage, or default in case of item miss.
     *
     * @throws  {DataError}
     */

  }, {
    key: 'get',
    value: function get(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this.getAdapter().get(key, defaultValue);
    }

    /**
     * Obtains multiple storage items by their unique keys.
     *
     * @param   {array}      keys          A list of keys that can obtained in a single operation.
     *                                     You can use dot notation on nested objects.
     * @param   {*}          defaultValue  Optional. Default value to return for keys that do not exist.
     *
     * @returns {object}                   An object with all key => value pairs.
     *                                     Keys that do not exist or is null will have defaultValue as value.
     *
     * @throws  {DataError}
     */

  }, {
    key: 'getMultiple',
    value: function getMultiple(keys) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this.getAdapter().getMultiple(keys, defaultValue);
    }

    /**
     * Persists data in the storage, uniquely referenced by a key.
     *
     * @param   {string}     key           The key of the item to store.
     *                                     You can use dot notation on nested objects to change just a specific property.
     * @param   {*}          value         The value of the item to store, must be serializable.
     * @param   {object}     options       Optional configs. Not all adapters support it.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'set',
    value: function set(key, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.getAdapter().set(key, value, options);
    }

    /**
     * Persists a set of key => value pairs in the storage.
     *
     * @param   {object}     values        An object with all key => value pairs for a multiple-set operation.
     *                                     You can use dot notation on nested objects to change just a specific property.
     * @param   {object}     options       Optional configs. Not all adapters support it.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'setMultiple',
    value: function setMultiple(values) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.getAdapter().setMultiple(values, options);
    }

    /**
     * Delete an item from the storage by its unique key.
     *
     * @param   {string}     key           The unique storage key of the item to delete.
     *                                     You can use dot notation on nested objects to delete just a specific property.
     * @param   {object}     options       Optional configs. Not all adapters support it.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'delete',
    value: function _delete(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.getAdapter().delete(key, options);
    }

    /**
     * Deletes multiple storage items in a single operation.
     *
     * @param   {array}      values        A list of unique keys for a multiple-delete operation.
     *                                     You can use dot notation on nested objects to delete just a specific property.
     * @param   {object}     options       Optional configs. Not all adapters support it.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'deleteMultiple',
    value: function deleteMultiple(keys) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return this.getAdapter().deleteMultiple(keys, options);
    }

    /**
     * Wipes clean the entire storage's keys.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'clear',
    value: function clear() {
      return this.getAdapter().clear();
    }

    /**
     * Returns entire storage's keys count.
     *
     * @returns {number}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'length',
    value: function length() {
      return this.getAdapter().length();
    }

    /**
     * Get value at specific numeric index
     *
     * @param   {number}     index         The numeric index of the value on storage.
     * @param   {*}          defaultValue  Optional. Default value to return for indexes that do not exist.
     *
     * @returns {*}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'index',
    value: function index(_index) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this.getAdapter().index(_index, defaultValue);
    }

    /**
     * Returns if storage is empty.
     *
     * @returns {boolean}
     *
     * @throws  {DataError}
     */

  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      return this.getAdapter().isEmpty();
    }

    /**
     * Listen for changes made by another instances.
     *
     * @param   {function}   closure       The function to be called when changes occurs by another instance.
     * @param   {array}      keys          Optional. If you want to specify only some keys to watch.
     *
     * @returns {*}
     */

  }, {
    key: 'listen',
    value: function listen(closure) {
      var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      this.getAdapter().listen(closure, keys);

      return this;
    }
  }, {
    key: 'deleteExpired',
    value: function deleteExpired() {
      this.getAdapter().deleteExpired();

      return this;
    }
  }]);

  return Storage;
}();

exports.default = Storage;
module.exports = exports['default'];