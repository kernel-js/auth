'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractAdapter2 = require('./AbstractAdapter');

var _AbstractAdapter3 = _interopRequireDefault(_AbstractAdapter2);

var _splitKey = require('./Helpers/splitKey');

var _splitKey2 = _interopRequireDefault(_splitKey);

var _support = require('@kernel-js/support');

var _exceptions = require('@kernel-js/exceptions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new _exceptions.TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new _exceptions.TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var driver = new WeakMap();
var serializer = new WeakMap();
var keyPrefix = new WeakMap();
var encryptionKey = new WeakMap();
var encryptionMethod = new WeakMap();

var Adapter = function (_AbstractAdapter) {
  _inherits(Adapter, _AbstractAdapter);

  /**
   * Adapter constructor
   */
  function Adapter() {
    _classCallCheck(this, Adapter);

    var _this = _possibleConstructorReturn(this, (Adapter.__proto__ || Object.getPrototypeOf(Adapter)).call(this));

    if (new.target === Adapter) {
      throw new _exceptions.TypeError('Cannot construct BaseAdapter instance directly.');
    }

    if (!_this.hasSupport()) {
      throw new _exceptions.NotSupportedError(_this.constructor.name + ' not available.');
    }

    _this.setKeyPrefix('kerneljs|');
    _this.setSerializer(require('../Serializers/TypedSerializer').default);
    return _this;
  }

  /**
   * @inheritDoc
   */


  _createClass(Adapter, [{
    key: 'getDriver',
    value: function getDriver() {
      return driver.get(this);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'setDriver',
    value: function setDriver(value) {
      return driver.set(this, value);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getKeyPrefix',
    value: function getKeyPrefix() {
      return keyPrefix.get(this);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'setKeyPrefix',
    value: function setKeyPrefix(value) {
      return keyPrefix.set(this, value);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getSerializer',
    value: function getSerializer() {
      return serializer.get(this);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'setSerializer',
    value: function setSerializer() {
      var givenSerializer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      serializer.set(this, givenSerializer);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getEncryptionKey',
    value: function getEncryptionKey() {
      return encryptionKey.get(this);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'setEncryptionKey',
    value: function setEncryptionKey(value) {
      return encryptionKey.set(this, value);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getEncryptionMethod',
    value: function getEncryptionMethod() {
      return encryptionMethod.get(this);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'setEncryptionMethod',
    value: function setEncryptionMethod(value) {
      return encryptionMethod.set(this, value);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'hasSupport',
    value: function hasSupport() {
      if (this.constructor.name === 'LocalStorageAdapter') {
        return window.localStorage !== undefined;
      } else if (this.constructor.name === 'SessionStorageAdapter') {
        return window.sessionStorage !== undefined;
      } else if (this.constructor.name === 'WebCacheAdapter') {
        return window !== undefined;
      }

      return true;
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'hasEventsSupport',
    value: function hasEventsSupport() {
      if (['LocalStorageAdapter', 'SessionStorageAdapter'].indexOf(this.constructor.name) !== -1) {
        return true;
      }

      return false;
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getUserKey',
    value: function getUserKey(key) {
      return (0, _support.isEmpty)(this.getKeyPrefix()) ? key : key.substr(this.getKeyPrefix().length, key.length);
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getKernelJSKey',
    value: function getKernelJSKey(key) {
      return (0, _support.isEmpty)(this.getKeyPrefix()) ? key : '' + this.getKeyPrefix() + key;
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'isKernelJSItem',
    value: function isKernelJSItem(key) {
      return key.substring(0, 9) === this.getKeyPrefix();
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'all',
    value: function all() {
      try {
        var keys = [],
            itemKey = void 0,
            len = this.getDriver().length;

        for (var i = 0; i < len; i++) {
          itemKey = this.getDriver().key(i);

          if (!this.isKernelJSItem(itemKey)) {
            continue;
          }

          if (this.isExpired(JSON.parse(this.getDriver().getItem(itemKey)))) {
            this.delete(itemKey);
            continue;
          }

          keys.push(itemKey);
        }

        return this.getMultiple(keys);
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'has',
    value: function has(key) {
      try {
        var item = void 0,
            exists = false,
            itemKey = void 0,
            len = this.getDriver().length;
        var splitKey = (0, _splitKey2.default)(key);

        for (var i = 0; i < len; i++) {
          itemKey = this.getDriver().key(i);

          if (!this.isKernelJSItem(itemKey)) {
            continue;
          }

          if (key !== this.getUserKey(itemKey)) {
            continue;
          }

          exists = true;
        }

        item = this.getSerializer().deserialize(this.getDriver().getItem(this.getKernelJSKey(splitKey.root)));

        if (this.isExpired(JSON.parse(this.getDriver().getItem(this.getKernelJSKey(splitKey.root))))) {
          this.delete(splitKey.root);
          return false;
        }

        if (splitKey.nested === null) {
          return exists;
        }

        exists = (0, _support.get)(item.value, splitKey.nested, '309e17f396019483e8505150f357832c') !== '309e17f396019483e8505150f357832c';

        return exists;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * Fetches a value from the storage.
     *
     * @inheritDoc
     */

  }, {
    key: 'get',
    value: function get(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      try {
        key = this.isKernelJSItem(key) ? key : this.getKernelJSKey(key);

        var splitKey = (0, _splitKey2.default)(key);
        var result = this.getSerializer().deserialize(this.getDriver().getItem(splitKey.root));

        if ((0, _support.isEmpty)(result)) {
          return defaultValue;
        }

        if (this.isExpired(result)) {
          this.delete(splitKey.root);
          return defaultValue;
        }

        if (splitKey.nested === null) {
          return result.value;
        }

        return (0, _support.get)(result.value, splitKey.nested, defaultValue);
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'getMultiple',
    value: function getMultiple(keys) {
      var _this2 = this;

      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      try {
        var values = {};

        keys.forEach(function (key) {
          values[!_this2.isKernelJSItem(key) ? key : _this2.getUserKey(key)] = _this2.get(key, defaultValue);
        });

        return values;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'set',
    value: function set(key, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      try {
        var splitKey = (0, _splitKey2.default)(key);

        if (splitKey.nested === null) {
          this.setItem(splitKey.root, value, options);
          return true;
        }

        var current = this.get(splitKey.root),
            itemValue = (0, _support.set)(current || {}, splitKey.nested, value);

        this.setItem(splitKey.root, itemValue, options);

        return true;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'setMultiple',
    value: function setMultiple(values) {
      var _this3 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      try {
        Object.keys(values).forEach(function (key) {
          _this3.set(key, values[key]);
        });

        return true;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'delete',
    value: function _delete(key) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      try {
        var splitKey = (0, _splitKey2.default)(key);

        if (splitKey.nested === null) {
          this.getDriver().removeItem('' + this.getKeyPrefix() + splitKey.root);
          return true;
        }

        var value = this.get(splitKey.root);

        (0, _support.unset)(value, splitKey.nested);
        return this.set(splitKey.root, value);
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'deleteMultiple',
    value: function deleteMultiple(keys) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      try {
        keys.forEach(function (key) {
          _this4.delete(key);
        });

        return true;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'clear',
    value: function clear() {
      try {
        this.getDriver().clear();
        return true;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'length',
    value: function length() {
      try {
        return Object.keys(this.all()).length;
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'index',
    value: function index(_index) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var all = this.all(),
          length = Object.keys(all).length;

      if (_index >= length) {
        return defaultValue;
      }

      try {
        var keys = [];

        for (var itemKey in all) {
          keys.push(itemKey);
        }

        return this.get(keys[_index], defaultValue);
      } catch (e) {
        throw new _exceptions.DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      return this.length() === 0;
    }

    /**
     * @inheritDoc
     */

  }, {
    key: 'listen',
    value: function listen(closure) {
      var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (!this.hasEventsSupport()) {
        throw new _exceptions.NotSupportedError(this.constructor.name + ' events not available.');
      }
    }

    /**
     * @private
     * @param key
     * @param value
     * @param options
     */

  }, {
    key: 'setItem',
    value: function setItem(key, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      options.expires = this.getExpires(options);

      if (options.expires === null) {
        delete options['expires'];
      }

      this.getDriver().setItem('' + this.getKeyPrefix() + key, this.getSerializer().serialize(value, options));
    }

    /**
     * @private
     * @param index
     */

  }, {
    key: 'isExpired',
    value: function isExpired(item) {
      return item.options.expires !== undefined && item.options.expires !== undefined && new Date(item.options.expires) < new Date();
    }

    /**
     * @protected
     * @param options
     */

  }, {
    key: 'getExpires',
    value: function getExpires() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (options.expires === undefined) {
        return null;
      }

      if (Object.prototype.toString.call(options.expires) === '[object Date]') {
        return options.expires.toUTCString();
      }

      if (typeof options.expires === 'number') {
        var _date = new Date();
        _date.setMinutes(_date.getMinutes() + options.expires);
        return _date.toUTCString();
      }

      var date = new Date(options.expires);
      if (date instanceof Date && !isNaN(date)) {
        return date.toUTCString();
      }

      return null;
    }
  }]);

  return Adapter;
}(_AbstractAdapter3.default);

exports.default = Adapter;
module.exports = exports['default'];