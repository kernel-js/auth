'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _AbstractSerializer2 = require('./AbstractSerializer');

var _AbstractSerializer3 = _interopRequireDefault(_AbstractSerializer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TypedSerializer = function (_AbstractSerializer) {
  _inherits(TypedSerializer, _AbstractSerializer);

  function TypedSerializer() {
    _classCallCheck(this, TypedSerializer);

    return _possibleConstructorReturn(this, (TypedSerializer.__proto__ || Object.getPrototypeOf(TypedSerializer)).apply(this, arguments));
  }

  _createClass(TypedSerializer, null, [{
    key: 'serialize',
    value: function serialize(value) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var dataType = 'unknown';

      if (Object.prototype.toString.call(value) === '[object Date]') {
        dataType = 'date';
        value = value.toUTCString();
      } else if (Object.prototype.toString.call(value) === '[object RegExp]') {
        dataType = 'regex';
        value = value.source;
      } else if (typeof value === 'function') {
        dataType = 'function';
        value = value.toString();
      } else {
        dataType = typeof value === 'undefined' ? 'undefined' : _typeof(value);
      }

      return options !== null ? JSON.stringify({ dataType: dataType, value: value, options: options }) : JSON.stringify({ dataType: dataType, value: value });
    }
  }, {
    key: 'deserialize',
    value: function deserialize(value) {
      if (value === null) {
        return null;
      }

      var json = JSON.parse(value);

      if (json.dataType === 'date') {
        json.value = new Date(json.value);
      } else if (json.dataType === 'regex') {
        json.value = new RegExp(json.value);
      } else if (json.dataType === 'function') {
        json.value = '' + json.value;
      } else if (json.dataType === 'boolean') {
        json.value = Boolean(json.value);
      }

      delete json['dataType'];

      return json;
    }
  }]);

  return TypedSerializer;
}(_AbstractSerializer3.default);

exports.default = TypedSerializer;
module.exports = exports['default'];