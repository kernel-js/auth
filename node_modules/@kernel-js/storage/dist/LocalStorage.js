"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Storage2 = require("./Storage/Storage");

var _Storage3 = _interopRequireDefault(_Storage2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var LocalStorage = function (_Storage) {
  _inherits(LocalStorage, _Storage);

  /**
   * Cookies constructor
   *
   * @param {function}                      closure            Optional. The function to be called when changes occurs
   *                                                           by another instance.
   * @param {array}                         keys               Optional. If you want to specify only some keys to watch.
   */
  function LocalStorage() {
    var closure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    _classCallCheck(this, LocalStorage);

    return _possibleConstructorReturn(this, (LocalStorage.__proto__ || Object.getPrototypeOf(LocalStorage)).call(this, 'LocalStorageAdapter', closure, keys));
  }

  return LocalStorage;
}(_Storage3.default);

exports.default = LocalStorage;
module.exports = exports["default"];