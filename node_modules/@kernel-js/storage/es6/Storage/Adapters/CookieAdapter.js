var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import Adapter from './Adapter';
import { get, isEmpty } from "@kernel-js/support";
import splitKeyHelper from "./Helpers/splitKey";
import { DataError } from "@kernel-js/exceptions";

var CookieAdapter = function (_Adapter) {
  _inherits(CookieAdapter, _Adapter);

  /**
   * LocalStorageAdapter constructor
   */
  function CookieAdapter() {
    _classCallCheck(this, CookieAdapter);

    var _this = _possibleConstructorReturn(this, (CookieAdapter.__proto__ || Object.getPrototypeOf(CookieAdapter)).call(this));

    _this.setDriver(require('../Drivers/Cookie').default);
    return _this;
  }

  /**
   * @inheritDoc
   */


  _createClass(CookieAdapter, [{
    key: "all",
    value: function all() {
      try {
        var all = this.getDriver().all();
        var keys = [];

        for (var itemKey in all) {
          if (!this.isKernelJSItem(itemKey)) {
            continue;
          }

          if (this.isExpired(JSON.parse(this.getDriver().getItem(itemKey)))) {
            this.delete(itemKey);
            continue;
          }

          keys.push(itemKey);
        }

        return this.getMultiple(keys);
      } catch (e) {
        throw new DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: "has",
    value: function has(key) {
      try {
        var all = this.getDriver().all();
        var item = void 0,
            exists = false;
        var splitKey = splitKeyHelper(key);

        for (var itemKey in all) {
          if (!this.isKernelJSItem(itemKey)) {
            continue;
          }

          if (key !== this.getUserKey(itemKey)) {
            continue;
          }

          exists = true;
        }

        item = this.getSerializer().deserialize(this.getDriver().getItem(this.getKernelJSKey(splitKey.root)));

        if (this.isExpired(JSON.parse(this.getDriver().getItem(this.getKernelJSKey(splitKey.root))))) {
          this.delete(splitKey.root);
          return false;
        }

        if (splitKey.nested === null) {
          return exists;
        }

        exists = get(item.value, splitKey.nested, '309e17f396019483e8505150f357832c') !== '309e17f396019483e8505150f357832c';

        return exists;
      } catch (e) {
        throw new DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: "clear",
    value: function clear() {
      try {
        var all = this.all();

        for (var itemKey in all) {
          this.delete(itemKey);
        }

        return true;
      } catch (e) {
        throw new DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: "index",
    value: function index(_index) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      var all = this.all(),
          length = Object.keys(all).length;

      if (_index >= length) {
        return defaultValue;
      }

      try {
        var keys = [];

        for (var itemKey in all) {
          keys.unshift(itemKey);
        }

        return this.get(keys[_index], defaultValue);
      } catch (e) {
        throw new DataError(e);
      }
    }

    /**
     * @inheritDoc
     */

  }, {
    key: "listen",
    value: function listen(closure) {
      var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      _get(CookieAdapter.prototype.__proto__ || Object.getPrototypeOf(CookieAdapter.prototype), "listen", this).call(this, closure, keys);
    }
  }]);

  return CookieAdapter;
}(Adapter);

export default CookieAdapter;