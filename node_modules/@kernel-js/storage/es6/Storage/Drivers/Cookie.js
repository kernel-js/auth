var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BrowserCookies = require('browser-cookies');

var Cookie = function () {
  function Cookie() {
    _classCallCheck(this, Cookie);
  }

  _createClass(Cookie, [{
    key: 'all',
    value: function all() {
      return BrowserCookies.all();
    }
  }, {
    key: 'getItem',
    value: function getItem(key) {
      return BrowserCookies.get(key);
    }
  }, {
    key: 'setItem',
    value: function setItem(name, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return BrowserCookies.set(name, value, options);
    }
  }, {
    key: 'removeItem',
    value: function removeItem(name, options) {
      return BrowserCookies.erase(name, options);
    }
  }, {
    key: 'length',
    value: function length() {
      return Object.keys(BrowserCookies.all());
    }
  }]);

  return Cookie;
}();

export default new Cookie();