var Crypto = require('crypto-browserify');

/**
 *
 * @param {*} data
 * @param {*} key
 * @param {*} algorithm
 */
var createHmac = function createHmac(data, key) {
  var algorithm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'md5';

  var hmac = Crypto.createHmac(algorithm, key);
  hmac.update(data);
  return hmac.digest('hex');
};

/**
 *
 * @param {*} data
 * @param {*} password
 */
var encrypt = function encrypt(data, password) {
  password = Crypto.createHash('md5').update(password).digest('hex');
  var iv = Crypto.randomBytes(16);
  var key = new Buffer.from(password);
  var plain = new Buffer.from(data);
  var cipher = Crypto.createCipheriv('aes-256-cbc', key, iv);

  var encrypted = cipher.update(plain);
  encrypted = Buffer.concat([encrypted, cipher.final()]);

  return iv.toString('hex') + ':' + encrypted.toString('hex');
};

/**
 *
 * @param {*} data
 * @param {*} password
 */
var decrypt = function decrypt(data, password) {
  password = Crypto.createHash('md5').update(password).digest('hex');
  var textParts = data.split(':');
  var iv = new Buffer.from(textParts.shift(), 'hex');
  var encryptedText = new Buffer.from(textParts.join(':'), 'hex');
  var decipher = Crypto.createDecipheriv('aes-256-cbc', new Buffer.from(password), iv);
  var decrypted = decipher.update(encryptedText);

  decrypted = Buffer.concat([decrypted, decipher.final()]);

  return decrypted.toString();
};

/**
 *
 * @param {*} data
 * @param {*} password
 * @param {*} hmac
 */
var encryptWithHmac = function encryptWithHmac(data, password, hmac) {
  password = Crypto.createHash('md5').update(password).digest('hex');
  var iv = Crypto.randomBytes(16).toString('hex').substr(0, 16);
  var encryptor = Crypto.createCipheriv('aes-256-cbc', password, iv);
  var encrypted = Buffer.from(iv).toString('base64') + encryptor.update(data, 'utf8', 'base64') + encryptor.final('base64');

  hmac.value = createHmac(encrypted, password);

  return encrypted;
};

/**
 *
 * @param {*} data
 * @param {*} password
 * @param {*} hmac
 */
var decryptWithHmac = function decryptWithHmac(data, password, hmac) {
  password = Crypto.createHash('md5').update(password).digest('hex');

  if (createHmac(data, password) !== hmac.value) {
    return 'Encrypted has been tampered with...';
  }

  var iv = Buffer.from(data.substr(0, 24), 'base64').toString();
  var decryptor = Crypto.createDecipheriv('aes-256-cbc', password, iv);

  return decryptor.update(data.substr(24), 'base64', 'utf8') + decryptor.final('utf8');
};

/**
 *
 * @param {*} data
 * @param {*} password
 * @param {*} hmac
 */
var encryptWithTSValidation = function encryptWithTSValidation(data, password, hmac) {
  var dataTS = new Date().toISOString().substr(0, 19) + data;
  return encryptWithHmac(dataTS, password, hmac);
};

/**
 *
 * @param {*} data
 * @param {*} password
 * @param {*} hmac
 * @param {*} intervalThreshold
 */
var decryptWithTSValidation = function decryptWithTSValidation(data, password, hmac) {
  var intervalThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 43200;

  var decrypted = decryptWithHmac(data, password, hmac);
  var now = new Date();
  var year = parseInt(decrypted.substr(0, 4)),
      month = parseInt(decrypted.substr(5, 2)) - 1,
      day = parseInt(decrypted.substr(8, 2)),
      hour = parseInt(decrypted.substr(11, 2)),
      minute = parseInt(decrypted.substr(14, 2)),
      second = parseInt(decrypted.substr(17, 2));
  var msgDate = new Date(Date.UTC(year, month, day, hour, minute, second));

  if (Math.round((now - msgDate) / 1000) <= intervalThreshold) {
    return decrypted.substr(19);
  }
};

export { encrypt, decrypt, encryptWithHmac, decryptWithHmac, encryptWithTSValidation, decryptWithTSValidation };